{"version":3,"sources":["components/button.js","App.js","components/input.js","serviceWorker.js","index.js"],"names":["ac","val","equal","bigFont","Button","props","className","children","isNaN","onClick","click","App","clear","setState","input","calculate","chars","replace","state","m","charAt","substr","eval","delete","slice","this","Component","Input","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.49929587.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"./button.css\"\r\n\r\nconst number = (val) => {\r\n    return !isNaN(val) || val === \"←\" || val === \".\";\r\n}\r\n\r\nconst ac = (val) => {\r\n    return val === \"AC\" || val === \"←\";\r\n}\r\n\r\nconst equal = (val) => {\r\n    return val === \"=\";\r\n}\r\n\r\nconst bigFont = (val) => {\r\n    return val === \"←\" || val === \"+\" || val === \"-\" || val === \"×\" || val === \"=\" || val === \"÷\";\r\n}\r\n\r\nexport const Button = props => (\r\n    <div className={`button ${number(props.children) ? null : \"number\"} ${ac(props.children) ? \"ac\" : null} ${equal(props.children) ? \"equal\" : null} ${bigFont(props.children) ? \"big-font\" : null}`} onClick={() => props.click(props.children)}>\r\n        {props.children}\r\n    </div>\r\n);","import React, {Component} from 'react';\nimport './App.css';\nimport { Button } from \"./components/button\";\nimport { Input } from \"./components/input\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      input : \"\"\n    }\n  }\n\n  clear = () => {\n    this.setState({\n      input:\"\"\n    });\n  }\n\n  calculate = () => {\n    var chars = {'×':'*','÷':'/'};\n    var replace = this.state.input.replace(/[×÷]/g, m => chars[m]);\n    if(replace.charAt(0) === '0'){\n      replace = replace.substr(1);\n    }\n    this.setState({\n      input: eval(replace)\n    })\n  }\n\n  input = (val) => {\n    this.setState({\n      input: this.state.input + val\n    })\n  }\n\n  delete = () => {\n    this.setState({\n      input: this.state.input.slice(0,-1)\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"calculator\">\n        <div className=\"calculator-wrapper\">\n          <Input input={this.state.input}/>\n          <hr></hr>\n          <div className=\"row\">\n            <Button click={this.clear}>AC</Button>\n            <Button click={this.input}>(</Button>\n            <Button click={this.input}>)</Button>\n            <Button click={this.input}>&divide;</Button>\n          </div>\n          <div className=\"row\">\n            <Button click={this.input}>7</Button>\n            <Button click={this.input}>8</Button>\n            <Button click={this.input}>9</Button>\n            <Button click={this.input}>&times;</Button>\n          </div>\n          <div className=\"row\">\n            <Button click={this.input}>4</Button>\n            <Button click={this.input}>5</Button>\n            <Button click={this.input}>6</Button>\n            <Button click={this.input}>-</Button>\n          </div>\n          <div className=\"row\">\n            <Button click={this.input}>1</Button>\n            <Button click={this.input}>2</Button>\n            <Button click={this.input}>3</Button>\n            <Button click={this.input}>+</Button>\n          </div>\n          <div className=\"row\">\n            <Button click={this.delete}>&larr;</Button>\n            <Button click={this.input}>0</Button>\n            <Button click={this.input}>.</Button>\n            <Button click={this.calculate}>=</Button>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App","import React from \"react\";\r\nimport \"./input.css\";\r\n\r\nexport const Input = props => <div className=\"input\">{props.input}</div>","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}